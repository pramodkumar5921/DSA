import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize

class PortfolioOptimizer:
    def __init__(self, returns, risk_free_rate=0.0):
        self.returns = returns
        self.risk_free_rate = risk_free_rate
        self.n_assets = len(returns.columns)
        self.mean_return = returns.mean()
        self.covariance_matrix = returns.cov()

    def objective_function(self, weights):
        portfolio_return = np.dot(weights, self.mean_return)
        portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(self.covariance_matrix, weights)))

        # Minimize negative Sharpe ratio (negating it because we are using a minimization solver)
        sharpe_ratio = (portfolio_return - self.risk_free_rate) / portfolio_volatility
        return -sharpe_ratio

    def optimize_portfolio(self):
        # Constraints
        constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})

        # Initial guess
        initial_weights = np.ones(self.n_assets) / self.n_assets

        # Optimization
        result = minimize(self.objective_function, initial_weights, method='SLSQP', constraints=constraints)

        return result.x, result.fun

    def plot_efficient_frontier(self, n_points=100):
        # Generate random portfolios for efficient frontier
        random_portfolios = np.zeros((n_points, self.n_assets))
        portfolio_returns = np.zeros(n_points)
        portfolio_volatilities = np.zeros(n_points)

        for i in range(n_points):
            weights = np.random.rand(self.n_assets)
            weights /= np.sum(weights)

            portfolio_return = np.dot(weights, self.mean_return)
            portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(self.covariance_matrix, weights)))

            random_portfolios[i, :] = weights
            portfolio_returns[i] = portfolio_return
            portfolio_volatilities[i] = portfolio_volatility

        # Plot efficient frontier
        plt.scatter(portfolio_volatilities, portfolio_returns, c=portfolio_returns / portfolio_volatilities, marker='o')
        plt.title('Efficient Frontier')
        plt.xlabel('Portfolio Volatility')
        plt.ylabel('Portfolio Return')
        plt.colorbar(label='Sharpe Ratio')
        plt.show()

if __name__ == "__main__":
    # Load your dataset or generate synthetic data
    np.random.seed(42)
    n_obs = 1000
    n_assets = 5
    returns = np.random.randn(n_obs, n_assets) / 100 + 0.001  # Example: 5 assets, 1000 observations

    # Convert returns to a DataFrame
    returns = pd.DataFrame(returns, columns=[f'Asset_{i}' for i in range(1, n_assets + 1)])

    # Create PortfolioOptimizer instance
    optimizer = PortfolioOptimizer(returns, risk_free_rate=0.001)

    # Optimize portfolio
    optimal_weights, optimal_sharpe_ratio = optimizer.optimize_portfolio()
    print("Optimal Portfolio Weights:")
    print(optimal_weights)
    print("Optimal Sharpe Ratio:", -optimal_sharpe_ratio)

    # Plot Efficient Frontier
    optimizer.plot_efficient_frontier()
